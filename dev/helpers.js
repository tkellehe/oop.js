;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// START: "is" functions
// -----------------------------------------------------------------------------------------------------------
// Functions that determine whether or not something(s) is the "is".
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

function is_function(obj)  { return obj instanceof Function };
function is_object(obj)    { return obj instanceof Object };
function is_instance(obj)  { return !is_function(obj) && is_object(obj) };
function is_undefined(obj) { return obj === undefined };
function is_null(obj)      { return obj === null };
function is_nan(obj)       { return obj !== obj };
function is_finite(obj)    { return isFinite(obj) };
function is_infinite(obj)  { return obj === Infinity || obj === -Infinity };
function is_const(obj)     { return !is_object(obj)   && !is_undefined(obj) &&
                                    !is_null(obj)     && !is_nan(obj)       &&
                                    !is_infinite(obj) };

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// END: "is" functions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// START: "to" functions
// -----------------------------------------------------------------------------------------------------------
// Handle conversions to particular data types.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

function to_bool(obj) { return !!obj };

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// END: "to" functions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// START: Inheritance Helpers
// -----------------------------------------------------------------------------------------------------------
// Basic assistance in forcing doing inheritance.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

function inherit_to_from(child, parent) { child.prototype = g_create(parent.prototype); return child; };
function inherit_from_to(parent, child) { child.prototype = g_create(parent.prototype); return child; };

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// END: "is" functions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// START: Error Helpers
// -----------------------------------------------------------------------------------------------------------
// Basic helpers of throwing errors that are specific oop.js errors.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

inherit_to_from(OOPError, Error);
function OOPError(message) {
   Error.captureStackTrace(this);
   this.message = message;
   this.name = "OOPError";
};

OOPError.prototype.toString = function() { return this.message };

g_defProp(global, "OOPError", { value: OOPError });

var THROW = { 
    'OOPError': function(message) { throw new OOPError(message) }
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// END: Error Helpers
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
;